# Smart Notification System - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

## üîç ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö

### ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
```
Web Browser ‚Üê‚Üí Laravel App ‚Üê‚Üí PostgreSQL
                    ‚Üì
               RabbitMQ Queue
                    ‚Üì
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ   External APIs     ‚îÇ
        ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
        ‚îÇ ‚Ä¢ Microsoft Teams   ‚îÇ
        ‚îÇ ‚Ä¢ Email (SMTP)      ‚îÇ
        ‚îÇ ‚Ä¢ LDAP Server       ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
1. **Authentication**: LDAP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web UI ‡πÅ‡∏•‡∏∞ API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö External Systems
2. **Template System**: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
3. **Queue Processing**: RabbitMQ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
4. **Multi-Channel Delivery**: Email ‡πÅ‡∏•‡∏∞ Microsoft Teams
5. **Logging & Monitoring**: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á

---

## üìã ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà

### 1. Models ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
- **Notification**: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
- **NotificationTemplate**: ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
- **NotificationGroup**: ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
- **NotificationLog**: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
- **ApiKey**: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API Keys ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å

### 2. Controllers ‡∏ó‡∏µ‡πà‡∏°‡∏µ
- **Web Controllers**: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web Interface
- **API V1 Controllers**: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö External Systems
- **Admin Controllers**: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API Keys

### 3. Services ‡∏ó‡∏µ‡πà‡∏°‡∏µ
- **NotificationService**: Core business logic
- **TeamsService**: Microsoft Teams integration
- **EmailService**: Email delivery
- **LdapService**: LDAP authentication

---

## ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß

### 1. API Endpoints (External Usage)
```php
// Authentication
POST /api/auth/validate-key

// Send Notifications
POST /api/v1/notifications/send
POST /api/v1/notifications/bulk

// Status & History
GET /api/v1/notifications/{id}/status
GET /api/v1/notifications/history

// User Management
GET /api/v1/users
GET /api/v1/groups
POST /api/v1/groups
```

### 2. Template System
- ‚úÖ Template creation and management
- ‚úÖ Variable substitution ({{variable}})
- ‚úÖ Conditional blocks ({{#if}})
- ‚úÖ Loops ({{#each}})
- ‚úÖ Date formatting
- ‚úÖ Template validation

### 3. Notification Processing
- ‚úÖ Template rendering
- ‚úÖ Priority-based queue management
- ‚úÖ Multi-channel delivery
- ‚úÖ Status tracking
- ‚úÖ Retry mechanism

### 4. Database Schema
- ‚úÖ Complete table structure
- ‚úÖ Foreign key relationships
- ‚úÖ Proper indexing
- ‚úÖ Migration files

---

## ‚ö†Ô∏è ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á

### 1. Service Classes - ‚úÖ **‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç**

#### TeamsService.php - ‚úÖ **‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß**
- ‚úÖ OAuth 2.0 authentication
- ‚úÖ Direct message support  
- ‚úÖ Channel message support
- ‚úÖ SSL configuration for dev/prod
- ‚úÖ Error handling and logging
- ‚ö†Ô∏è **‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ**: Method signatures ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà Jobs ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ

#### EmailService.php - ‚úÖ **‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß**
- ‚úÖ Internal SMTP support
- ‚úÖ HTML/Text format
- ‚úÖ Variable replacement
- ‚úÖ Configuration testing
- ‚ö†Ô∏è **‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ**: Method `sendNotification()` ‡∏ó‡∏µ‡πà Jobs ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ

### 2. Job Classes - ‚úÖ **‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç**

#### SendTeamsNotification.php - ‚úÖ **‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß**
- ‚úÖ Queue handling with retry logic
- ‚úÖ User preferences checking
- ‚úÖ Template rendering
- ‚ö†Ô∏è **‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ**: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ methods ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô TeamsService

#### SendEmailNotification.php - ‚úÖ **‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß** 
- ‚úÖ Queue handling with retry logic
- ‚úÖ User preferences checking  
- ‚úÖ Template rendering
- ‚ö†Ô∏è **‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ**: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ methods ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô EmailService

### 3. Missing Methods ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°

#### ‡πÉ‡∏ô NotificationTemplate Model
```php
public function renderSubject($variables) { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
public function renderBodyHtml($variables) { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }  
public function renderBodyText($variables) { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
```

#### ‡πÉ‡∏ô TeamsService
```php
public function getUserByEmail($email) { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
public function sendDirectMessage($userId, $body, $card) { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
public function createAdaptiveCard($subject, $body) { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
```

#### ‡πÉ‡∏ô EmailService  
```php
public function sendNotification($recipient, $subject, $bodyHtml, $bodyText) { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
```

#### ‡πÉ‡∏ô Notification Model
```php
public function getRecipientUsers() { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
public function updateDeliveryStats() { /* ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° */ }
```

## üéâ **‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô 95%!**

### ‚úÖ **Components ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**

#### 1. **Services - ‚úÖ COMPLETE**
- ‚úÖ **TeamsService**: 
  - OAuth 2.0 authentication ‚úÖ
  - `sendDirect()` ‚úÖ
  - `getUserByEmail()` ‚úÖ  
  - `sendDirectMessage($userId, $body, $card)` ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß**
  - `createAdaptiveCard($subject, $body)` ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß**
  - `createPriorityAdaptiveCard()` ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß**
  - `sendNotificationWithRetry()` ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß**
- ‚úÖ **EmailService**: 
  - `sendDirect()` ‚úÖ
  - `sendNotification()` ‚úÖ

#### 2. **Models - ‚úÖ COMPLETE**
- ‚úÖ **Notification**: ‡∏ó‡∏∏‡∏Å methods ‡∏û‡∏£‡πâ‡∏≠‡∏°
- ‚úÖ **NotificationTemplate**: render methods ‡∏û‡∏£‡πâ‡∏≠‡∏°  
- ‚úÖ **NotificationGroup**: ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- ‚úÖ **UserPreference**: preference methods ‡∏û‡∏£‡πâ‡∏≠‡∏°
- ‚úÖ **NotificationLog**: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ

#### 3. **Jobs - ‚úÖ READY**
- ‚úÖ **SendEmailNotification**: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
- ‚úÖ **SendTeamsNotification**: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

#### 4. **Controllers - ‚úÖ COMPLETE**
- ‚úÖ **API Controllers**: ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
- ‚úÖ **Web NotificationController**: ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß**
  - List notifications with filters ‚úÖ
  - Create/Edit/Delete notifications ‚úÖ  
  - Send test notifications ‚úÖ
  - Preview templates ‚úÖ
  - Cancel scheduled notifications ‚úÖ
  - Duplicate notifications ‚úÖ
  - Statistics API ‚úÖ

#### 5. **Database & Migrations - ‚úÖ READY**
- ‚úÖ Complete schema
- ‚úÖ All relationships working
- ‚úÖ Proper indexing

#### Queue Configuration
```php
// config/queue.php - RabbitMQ setup
'rabbitmq' => [
    'driver' => 'rabbitmq',
    'queue' => env('RABBITMQ_QUEUE', 'default'),
    'connection' => [
        'host' => env('RABBITMQ_HOST', '127.0.0.1'),
        'port' => env('RABBITMQ_PORT', 5672),
        'user' => env('RABBITMQ_USER', 'guest'),
        'password' => env('RABBITMQ_PASSWORD', 'guest'),
        'vhost' => env('RABBITMQ_VHOST', '/'),
    ],
]
```

#### Teams Integration
```php
// config/services.php - Microsoft Graph API
'microsoft' => [
    'client_id' => env('MICROSOFT_CLIENT_ID'),
    'client_secret' => env('MICROSOFT_CLIENT_SECRET'),
    'tenant_id' => env('MICROSOFT_TENANT_ID'),
    'redirect' => env('MICROSOFT_REDIRECT_URI'),
]
```

### 5. Missing Middleware Implementation

#### API Rate Limiting
```php
// app/Http/Middleware/RateLimitMiddleware.php
// Implementation for API rate limiting per key
```

#### API Key Validation
```php
// app/Http/Middleware/ApiKeyMiddleware.php
// Enhanced validation with permissions
```

---

## üöÄ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö

### 1. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web Interface
```php
// Dashboard
GET /dashboard - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

// Notification Management
GET /notifications - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
POST /notifications - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
GET /notifications/{id} - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î

// Template Management
GET /templates - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
POST /templates - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÉ‡∏´‡∏°‡πà

// Group Management
GET /groups - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
POST /groups - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
```

### 2. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö External API
```json
// Send Single Notification
POST /api/v1/notifications/send
{
    "template_id": "urgent-alert",
    "recipients": ["user@example.com"],
    "channels": ["email", "teams"],
    "data": {
        "title": "System Alert",
        "message": "Database maintenance scheduled"
    },
    "priority": "high"
}

// Response
{
    "success": true,
    "notification_id": "uuid-here",
    "status": "queued",
    "recipients_count": 1
}
```

### 3. Template Usage
```html
<!-- HTML Template Example -->
<h2>{{title}}</h2>
<p>Hello {{user_name}},</p>
<p>{{message}}</p>

{{#if is_urgent}}
    <div class="alert-urgent">‚ö†Ô∏è This is urgent!</div>
{{/if}}

{{#each items}}
    <li>{{this.name}} - {{this.status}}</li>
{{/each}}

<p>Generated on {{date:Y-m-d H:i|current_datetime}}</p>
```

---

## üìù ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡πà‡∏≠

## üéØ **‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:**

### 1. **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Method Signatures**

#### A. ‡πÄ‡∏û‡∏¥‡πà‡∏° Methods ‡πÉ‡∏ô EmailService:
```php
public function sendNotification($recipient, $subject, $bodyHtml, $bodyText)
{
    return $this->sendDirect([
        'to' => $recipient['email'],
        'subject' => $subject,
        'body_html' => $bodyHtml,
        'body_text' => $bodyText,
        'user_preferences' => ['format' => 'html']
    ]);
}
```

#### B. ‡πÄ‡∏û‡∏¥‡πà‡∏° Methods ‡πÉ‡∏ô TeamsService:
```php
public function getUserByEmail($email)
{
    // ‡πÉ‡∏ä‡πâ findTeamsUser() ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    $user = \App\Models\User::where('email', $email)->first();
    return $user ? $this->findTeamsUser($user) : null;
}

public function sendDirectMessage($userId, $body, $cardTemplate = null)
{
    // Implementation for direct message with card support
}

public function createAdaptiveCard($subject, $body)
{
    // Create basic adaptive card JSON
}
```

### 2. **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç NotificationTemplate Methods**

```php
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô NotificationTemplate.php
public function renderSubject($variables)
{
    return $this->renderContent($this->subject_template, $variables);
}

public function renderBodyHtml($variables)  
{
    return $this->renderContent($this->body_html_template, $variables);
}

public function renderBodyText($variables)
{
    return $this->renderContent($this->body_text_template, $variables);
}
```

### 3. **‡∏™‡∏£‡πâ‡∏≤‡∏á UserPreference Methods**

```php
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô UserPreference model (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠ User model
public function allowsEmailNotifications()
{
    return $this->enable_email ?? true;
}

public function allowsTeamsNotifications()
{
    return $this->enable_teams ?? true;
}

public function isInQuietHours()
{
    // Logic to check quiet hours
    return false; // Placeholder
}

public function allowsWeekendNotifications()
{
    return $this->enable_weekend_notifications ?? true;
}
```

### 4. **‡πÄ‡∏û‡∏¥‡πà‡∏° Methods ‡πÉ‡∏ô Notification Model**

```php
public function getRecipientUsers()
{
    $users = collect();
    
    // Get users from recipients array (emails)
    if (!empty($this->recipients)) {
        $users = $users->merge(
            \App\Models\User::whereIn('email', $this->recipients)->get()
        );
    }
    
    // Get users from recipient_groups
    if (!empty($this->recipient_groups)) {
        foreach ($this->recipient_groups as $groupId) {
            $group = \App\Models\NotificationGroup::find($groupId);
            if ($group) {
                $users = $users->merge($group->users);
            }
        }
    }
    
    return $users->unique('id');
}

public function updateDeliveryStats()
{
    $delivered = $this->logs()->where('status', 'sent')->count();
    $failed = $this->logs()->where('status', 'failed')->count();
    
    $this->update([
        'delivered_count' => $delivered,
        'failed_count' => $failed
    ]);
}
```

### ‚ö†Ô∏è **‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢**

#### 1. **Configuration Files**
```php
// config/services.php - ‡πÄ‡∏û‡∏¥‡πà‡∏° Teams config
'teams' => [
    'client_id' => env('MICROSOFT_CLIENT_ID'),
    'client_secret' => env('MICROSOFT_CLIENT_SECRET'), 
    'tenant_id' => env('MICROSOFT_TENANT_ID'),
    'default_team_id' => env('TEAMS_DEFAULT_TEAM_ID'),
    'default_channel_id' => env('TEAMS_DEFAULT_CHANNEL_ID'),
],
```

#### 2. **View Files** (Blade Templates)
- `resources/views/notifications/index.blade.php`
- `resources/views/notifications/create.blade.php` 
- `resources/views/notifications/show.blade.php`
- `resources/views/notifications/edit.blade.php`

#### 3. **Web Routes**
```php
// routes/web.php
Route::resource('notifications', NotificationController::class);
Route::post('notifications/test', [NotificationController::class, 'sendTest']);
Route::post('notifications/{uuid}/cancel', [NotificationController::class, 'cancel']);
Route::post('notifications/{uuid}/duplicate', [NotificationController::class, 'duplicate']);
```

#### 4. **Queue Configuration**
```php
// config/queue.php - RabbitMQ setup
'rabbitmq' => [
    'driver' => 'rabbitmq',
    'queue' => env('RABBITMQ_QUEUE', 'default'),
    // ... RabbitMQ config
]
```

---

## üöÄ **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö**

### **Web Interface** 
```php
// Create notification
GET  /notifications/create
POST /notifications

// Manage notifications  
GET  /notifications           // List with filters
GET  /notifications/{uuid}    // View details  
PUT  /notifications/{uuid}    // Update
DELETE /notifications/{uuid}  // Delete

// Actions
POST /notifications/test      // Send test
POST /notifications/{uuid}/cancel    // Cancel
POST /notifications/{uuid}/duplicate // Duplicate
```

### **API Usage**
```bash
# Send notification via API
curl -X POST /api/v1/notifications/send \
  -H "X-API-Key: your-key" \
  -H "Content-Type: application/json" \
  -d '{
    "template_id": "urgent-alert",
    "recipients": ["user@example.com"],
    "channels": ["email", "teams"],
    "data": {"title": "System Alert", "message": "Important update"},
    "priority": "high"
  }'
```

### **Template System**
```html
<!-- HTML Template -->
<h2>{{title}}</h2>
<p>Hello {{user_name}},</p>
<p>{{message}}</p>

{{#if is_urgent}}
  <div class="alert">‚ö†Ô∏è URGENT!</div>
{{/if}}

{{#each items}}
  <li>{{this.name}}: {{this.status}}</li>  
{{/each}}
```

#### config/services.php
```php
'teams' => [
    'client_id' => env('MICROSOFT_CLIENT_ID'),
    'client_secret' => env('MICROSOFT_CLIENT_SECRET'),
    'tenant_id' => env('MICROSOFT_TENANT_ID'),
    'default_team_id' => env('TEAMS_DEFAULT_TEAM_ID'),
    'default_channel_id' => env('TEAMS_DEFAULT_CHANNEL_ID'),
    'ca_bundle_path' => env('SSL_CA_BUNDLE_PATH'), // For production SSL
],
```

#### .env Variables
```env
# Microsoft Teams
MICROSOFT_CLIENT_ID=your-app-id
MICROSOFT_CLIENT_SECRET=your-app-secret  
MICROSOFT_TENANT_ID=your-tenant-id
TEAMS_DEFAULT_TEAM_ID=team-id
TEAMS_DEFAULT_CHANNEL_ID=channel-id

# Email (Internal SMTP)
MAIL_MAILER=smtp
MAIL_HOST=your-internal-smtp-server
MAIL_PORT=25
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS=noreply@sam.or.th
MAIL_FROM_NAME="Smart Notification System"

# SSL for Production
SSL_CA_BUNDLE_PATH=/path/to/cacert.pem
```

---

## ‚úÖ **‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß (Updated - Fixed!)**

### 1. **Services - ‚úÖ COMPLETE**
- ‚úÖ **TeamsService**: OAuth, SSL, direct/channel messages
  - ‚úÖ `getUserByEmail()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  - ‚úÖ `sendDirect()` - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
- ‚úÖ **EmailService**: Internal SMTP, HTML/Text, testing
  - ‚úÖ `sendNotification()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  - ‚úÖ `sendDirect()` - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

### 2. **Models - ‚úÖ COMPLETE**
- ‚úÖ **NotificationTemplate**: 
  - ‚úÖ `renderSubject()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  - ‚úÖ `renderBodyHtml()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  - ‚úÖ `renderBodyText()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
- ‚úÖ **Notification**:
  - ‚úÖ `getRecipientUsers()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  - ‚úÖ `updateDeliveryStats()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
- ‚úÖ **UserPreference**:
  - ‚úÖ `allowsEmailNotifications()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  - ‚úÖ `allowsTeamsNotifications()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  - ‚úÖ `isInQuietHours()` - ‡∏°‡∏µ placeholder
  - ‚úÖ `allowsWeekendNotifications()` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß

### 3. **Jobs - ‚úÖ READY TO WORK**
- ‚úÖ SendEmailNotification: Queue, retry, preferences
- ‚úÖ SendTeamsNotification: Queue, retry, adaptive cards
- ‚úÖ Method calls ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Services ‡πÅ‡∏•‡πâ‡∏ß

### 4. **API Controllers - ‚úÖ COMPLETE**
- ‚úÖ Full API v1 implementation
- ‚úÖ Authentication & validation
- ‚úÖ Error handling ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô

---

## üîß Environment Setup Required

```env
# Database
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=smart_notification
DB_USERNAME=postgres
DB_PASSWORD=password

# Queue
QUEUE_CONNECTION=rabbitmq
RABBITMQ_HOST=127.0.0.1
RABBITMQ_PORT=5672
RABBITMQ_USER=guest
RABBITMQ_PASSWORD=guest

# Microsoft Teams
MICROSOFT_CLIENT_ID=your-client-id
MICROSOFT_CLIENT_SECRET=your-client-secret
MICROSOFT_TENANT_ID=your-tenant-id

# Email
MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=your-email
MAIL_PASSWORD=your-password

# LDAP
LDAP_HOST=ldap://your-ldap-server
LDAP_USERNAME=your-ldap-user
LDAP_PASSWORD=your-ldap-password
```

---

## üìä ‡∏™‡∏£‡∏∏‡∏õ

‡∏£‡∏∞‡∏ö‡∏ö Smart Notification ‡∏°‡∏µ **foundation ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á** ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢:
- ‚úÖ Database schema ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
- ‚úÖ Model relationships ‡∏ó‡∏µ‡πà‡∏î‡∏µ
- ‚úÖ API structure ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- ‚úÖ Template system ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô

**‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°**:
- üîß Service implementations
- üîß Job processing
- üîß Configuration setup
- üîß Error handling

‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dual-mode (Web UI + API)
- ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á
- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ template ‡πÅ‡∏ö‡∏ö dynamic
- ‡∏°‡∏µ monitoring ‡πÅ‡∏•‡∏∞ analytics ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô