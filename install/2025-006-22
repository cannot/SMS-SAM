# Smart Notification System - Route Analysis

## ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå

### üî¥ API Routes ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î (api.php)

#### 1. Group Management APIs (‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ñ‡∏π‡∏Å comment ‡∏≠‡∏≠‡∏Å)
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô api.php - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
Route::prefix('groups')->controller(GroupController::class)->group(function () {
    Route::get('/', 'index')->name('api.groups.index');
    Route::post('/', 'store')->name('api.groups.store');
    Route::get('/{id}', 'show')->name('api.groups.show');
    Route::put('/{id}', 'update')->name('api.groups.update');
    Route::delete('/{id}', 'destroy')->name('api.groups.destroy');
    
    // Group members management
    Route::get('/{id}/members', 'getMembers')->name('api.groups.members');
    Route::post('/{id}/members', 'addMembers')->name('api.groups.members.add');
    Route::delete('/{id}/members', 'removeMembers')->name('api.groups.members.remove');
});
```

#### 2. Template Management APIs
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô api.php ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° CRUD ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
Route::prefix('templates')->group(function () {
    Route::post('/', 'store')->name('api.templates.store');  // ‡∏Ç‡∏≤‡∏î
    Route::put('/{id}', 'update')->name('api.templates.update');  // ‡∏Ç‡∏≤‡∏î
    Route::delete('/{id}', 'destroy')->name('api.templates.destroy');  // ‡∏Ç‡∏≤‡∏î
    Route::post('/{id}/duplicate', 'duplicate')->name('api.templates.duplicate');  // ‡∏Ç‡∏≤‡∏î
});
```

#### 3. Notification Management APIs (‡∏Ç‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô api.php
Route::prefix('notifications')->group(function () {
    Route::get('/', 'index')->name('api.notifications.index');  // ‡∏Ç‡∏≤‡∏î
    Route::post('/schedule', 'schedule')->name('api.notifications.schedule');  // ‡∏Ç‡∏≤‡∏î
    Route::get('/failed', 'getFailed')->name('api.notifications.failed');  // ‡∏Ç‡∏≤‡∏î
    Route::post('/bulk/cancel', 'bulkCancel')->name('api.notifications.bulk.cancel');  // ‡∏Ç‡∏≤‡∏î
});
```

#### 4. Delivery Status APIs (‡∏Ç‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô api.php - ‡∏ï‡∏≤‡∏° SRS ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
Route::prefix('delivery')->group(function () {
    Route::get('/stats', 'getDeliveryStats')->name('api.delivery.stats');
    Route::get('/failed/{id}/details', 'getFailureDetails')->name('api.delivery.failure-details');
    Route::post('/retry-failed', 'retryFailed')->name('api.delivery.retry-failed');
});
```

#### 5. LDAP Integration APIs
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô api.php - ‡∏ï‡∏≤‡∏° SRS ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
Route::prefix('ldap')->group(function () {
    Route::get('/departments', 'getDepartments')->name('api.ldap.departments');
    Route::get('/departments/{dept}/users', 'getDepartmentUsers')->name('api.ldap.dept-users');
    Route::post('/sync/manual', 'manualSync')->name('api.ldap.manual-sync');
    Route::get('/sync/status', 'getSyncStatus')->name('api.ldap.sync-status');
});
```

### üü° Web Routes ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î (web.php)

#### 1. Notification Logs Management
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô web.php
Route::prefix('notification-logs')->name('notification-logs.')->group(function () {
    Route::get('/', [NotificationLogController::class, 'index'])->name('index');
    Route::get('/{log}', [NotificationLogController::class, 'show'])->name('show');
    Route::get('/failed/retry', [NotificationLogController::class, 'retryFailed'])->name('retry-failed');
    Route::delete('/cleanup', [NotificationLogController::class, 'cleanup'])->name('cleanup');
});
```

#### 2. System Health & Monitoring
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô web.php - ‡∏ï‡∏≤‡∏° SRS ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
Route::prefix('system')->name('system.')->group(function () {
    Route::get('/health', [SystemController::class, 'health'])->name('health');
    Route::get('/queue-status', [SystemController::class, 'queueStatus'])->name('queue-status');
    Route::get('/ldap-status', [SystemController::class, 'ldapStatus'])->name('ldap-status');
    Route::get('/external-services', [SystemController::class, 'externalServices'])->name('external-services');
});
```

#### 3. API Usage Analytics (Web Interface)
```php
// ‡∏°‡∏µ‡πÉ‡∏ô reports ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ dedicated section
Route::prefix('api-analytics')->name('api-analytics.')->group(function () {
    Route::get('/', [ApiAnalyticsController::class, 'index'])->name('index');
    Route::get('/by-key', [ApiAnalyticsController::class, 'byKey'])->name('by-key');
    Route::get('/rate-limits', [ApiAnalyticsController::class, 'rateLimits'])->name('rate-limits');
    Route::get('/top-consumers', [ApiAnalyticsController::class, 'topConsumers'])->name('top-consumers');
});
```

### üü† Routes ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏° SRS

#### 1. Webhook Endpoints (‡∏ï‡∏≤‡∏° SRS ‡∏°‡∏µ External Integration)
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô api.php
Route::prefix('webhooks')->middleware(['webhook.auth'])->group(function () {
    Route::post('/teams/message-sent', [WebhookController::class, 'teamsMessageSent']);
    Route::post('/email/delivered', [WebhookController::class, 'emailDelivered']);
    Route::post('/email/bounced', [WebhookController::class, 'emailBounced']);
});
```

#### 2. Queue Management Routes
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô web.php - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
Route::prefix('admin/queue')->name('admin.queue.')->group(function () {
    Route::get('/', [QueueController::class, 'index'])->name('index');
    Route::post('/pause', [QueueController::class, 'pause'])->name('pause');
    Route::post('/resume', [QueueController::class, 'resume'])->name('resume');
    Route::post('/clear', [QueueController::class, 'clear'])->name('clear');
    Route::get('/failed', [QueueController::class, 'failed'])->name('failed');
    Route::post('/failed/{id}/retry', [QueueController::class, 'retryFailed'])->name('retry-failed');
});
```

#### 3. Notification Templates Testing
```php
// ‡∏Ç‡∏≤‡∏î‡πÉ‡∏ô web.php
Route::prefix('templates')->group(function () {
    Route::post('/{template}/test-send', [NotificationTemplateController::class, 'testSend'])->name('templates.test-send');
    Route::get('/{template}/preview/{channel}', [NotificationTemplateController::class, 'previewChannel'])->name('templates.preview-channel');
});
```

### üîµ Route Middleware ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á

#### 1. Rate Limiting ‡πÉ‡∏ô API
```php
// ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ä‡πâ ApiKeyMiddleware ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
Route::middleware(['api.key', 'throttle:api'])->group(function () {
    // API routes with dynamic rate limiting based on API key
});
```

#### 2. API Versioning
```php
// ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ versioning ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
Route::prefix('v1')->name('v1.')->group(function () {
    // Current v1 routes
});

Route::prefix('v2')->name('v2.')->group(function () {
    // Future v2 routes
});
```

### üü¢ Routes ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á

#### 1. Bulk Operations ‡πÉ‡∏ô API
```php
// ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
Route::post('/notifications/bulk/status', 'getBulkStatus')->name('api.notifications.bulk.status');
Route::post('/users/bulk/validate', 'bulkValidate')->name('api.users.bulk.validate');
```

#### 2. Export/Import Routes
```php
// ‡∏°‡∏µ‡πÉ‡∏ô web ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô API ‡∏î‡πâ‡∏ß‡∏¢
Route::get('/templates/export/{format}', 'export')->name('api.templates.export');
Route::post('/templates/import', 'import')->name('api.templates.import');
```

## ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

### ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:

1. **‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î**: ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Group Management APIs
2. **‡∏™‡∏π‡∏á**: ‡πÄ‡∏û‡∏¥‡πà‡∏° Template Management APIs ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
3. **‡∏Å‡∏•‡∏≤‡∏á**: ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification Logs Management
4. **‡∏Å‡∏•‡∏≤‡∏á**: ‡πÄ‡∏û‡∏¥‡πà‡∏° System Health Monitoring
5. **‡∏ï‡πà‡∏≥**: ‡πÄ‡∏û‡∏¥‡πà‡∏° Webhook endpoints ‡πÅ‡∏•‡∏∞ Queue management

### Controllers ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ:
- `NotificationLogController`
- `SystemController` 
- `ApiAnalyticsController`
- `QueueController`
- `WebhookController`

### Middleware ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°:
- `webhook.auth` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook authentication
- `throttle:api` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dynamic rate limiting
- `api.version` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API versioning