# Smart Notification System
## Software Requirements Specification (SRS)

**Version: 2.0**  
**Date: June 23, 2025**  
**Status: Updated to reflect current implementation**

---

## 1. Introduction

### 1.1 Purpose
เอกสารนี้มีวัตถุประสงค์เพื่อกำหนดข้อกำหนดที่อัปเดตสำหรับระบบ Smart Notification System ที่พัฒนาด้วย PHP Laravel สำหรับการส่งการแจ้งเตือนอัตโนมัติในองค์กร โดยสะท้อนการพัฒนาที่เกิดขึ้นจริง

### 1.2 Scope
ระบบ Smart Notification จะเป็นระบบแจ้งเตือนแบบอัตโนมัติที่สามารถ:

- เชื่อมต่อกับระบบ LDAP เพื่อจัดการผู้ใช้ **พร้อม Fallback Authentication**
- ส่งการแจ้งเตือนผ่าน Microsoft Teams และ Email
- ใช้ RabbitMQ ในการจัดการคิวข้อความ
- เก็บข้อมูลใน PostgreSQL
- **ระบบจัดการสิทธิ์แบบ Role-Based Access Control (RBAC)**
- **การจัดการ Template แบบ Dynamic Variables**
- **ระบบ Password Reset และ User Management ที่ครบถ้วน**
- บันทึกและติดตาม Log การใช้งาน

### 1.3 Definitions and Acronyms
- **LDAP**: Lightweight Directory Access Protocol
- **RBAC**: Role-Based Access Control
- **MQ**: Message Queue (RabbitMQ)
- **API**: Application Programming Interface
- **JWT**: JSON Web Token
- **CRUD**: Create, Read, Update, Delete
- **SPA**: Single Page Application

### 1.4 References
- Laravel Framework Documentation (v10+)
- Spatie Laravel Permission Package
- RabbitMQ Documentation
- Microsoft Graph API Documentation
- PostgreSQL Documentation

---

## 2. Overall Description

### 2.1 Product Perspective
ระบบ Smart Notification เป็นระบบแจ้งเตือนแบบรวมศูนย์ที่ทำงานร่วมกับ:

- ระบบ LDAP ขององค์กร (พร้อม Fallback ระบบ)
- Microsoft Teams
- Email Server (SMTP/IMAP)
- RabbitMQ Message Broker
- PostgreSQL Database
- **Spatie Permission Package สำหรับ RBAC**

### 2.2 Product Functions

**Core Functions:**
- การจัดการผู้ใช้ผ่าน **Hybrid Authentication** (LDAP + Fallback)
- **ระบบ Role-Based Access Control** แบบละเอียด
- สร้างและจัดการกลุ่มการแจ้งเตือน
- **Template Management พร้อม Dynamic Variables**
- กำหนดเงื่อนไขและตารางเวลาการแจ้งเตือน
- ส่งการแจ้งเตือนผ่านหลายช่องทาง
- **API Gateway พร้อม Rate Limiting**
- การจัดการ API Keys และ Authentication
- ติดตามสถานะการส่งข้อความ
- **ระบบ Password Reset ที่ครบถ้วน**
- รายงานและสถิติการใช้งาน

### 2.3 User Classes

- **System Administrator**: จัดการระบบ, ผู้ใช้, และ permissions
- **Notification Manager**: สร้างและจัดการรูปแบบการแจ้งเตือน
- **End User**: รับการแจ้งเตือนและปรับแต่งการตั้งค่า
- **IT Support**: ตรวจสอบ logs และแก้ไขปัญหา
- **API Consumer**: ระบบภายนอกที่เรียกใช้งานผ่าน API Gateway
- **API Administrator**: จัดการ API Keys และสิทธิการเข้าถึง
- **Template Designer**: สร้างและแก้ไข notification templates

### 2.4 Operating Environment

- **Server**: Linux/Windows Server
- **Web Server**: Apache/Nginx
- **Database**: PostgreSQL 13+
- **Message Queue**: RabbitMQ 3.8+
- **PHP**: PHP 8.1+ with Laravel 10+
- **Frontend**: Laravel Blade Templates + Bootstrap/Tailwind CSS
- **Authentication**: LDAP + Database Fallback

### 2.5 Constraints

- ต้องใช้ LDAP ขององค์กรในการ Authentication หลัก
- **Fallback Authentication ต้องใช้เฉพาะเมื่อ LDAP ไม่พร้อมใช้งาน**
- จำกัดจำนวนการส่งข้อความต่อนาทีตาม API Limits
- ข้อมูลส่วนบุคคลต้องปฏิบัติตาม PDPA
- **Permission system ต้องปฏิบัติตาม Principle of Least Privilege**

---

## 3. Specific Requirements

### 3.1 Functional Requirements

#### 3.1.1 Enhanced User Authentication and Management

**FR-01: Hybrid LDAP Authentication**
- ระบบต้องสามารถเชื่อมต่อกับ LDAP Server เพื่อตรวจสอบข้อมูลผู้ใช้
- รองรับการ Login ผ่าน LDAP credentials
- **Automatic fallback ไปยัง database authentication เมื่อ LDAP ไม่พร้อมใช้งาน**
- ดึงข้อมูลผู้ใช้จาก LDAP (ชื่อ, อีเมล, แผนก, ตำแหน่ง)
- **บันทึก auth_source เพื่อติดตามแหล่งที่มาของการ authentication**

**FR-02: Advanced User Profile Management**
- แสดงข้อมูลโปรไฟล์จาก LDAP หรือ Database
- อนุญาตให้ผู้ใช้ปรับแต่งการตั้งค่าการแจ้งเตือน
- จัดการ Preference การรับข้อความ
- **ระบบ Soft Delete สำหรับ user records**
- **Password reset functionality สำหรับ non-LDAP users**

**FR-03: Role-Based Access Control (RBAC)**
- **ใช้ Spatie Permission Package**
- **รองรับ Roles และ Permissions แบบละเอียด**
- **Permission categories (User Management, Notification Management, etc.)**
- **Team-based permissions (optional)**
- **Model-specific permissions**

#### 3.1.2 Enhanced Notification Management

**FR-04: Advanced Template Creation**
- สร้างเทมเพลตการแจ้งเตือนแบบต่างๆ
- รองรับ Rich Text และ Markdown
- **Dynamic Variables พร้อม default values**
- **Template preview พร้อม sample data**
- **Template versioning และ history**

**FR-05: Enhanced Notification Scheduling**
- กำหนดเวลาส่งการแจ้งเตือน (ทันที, กำหนดเวลา, เป็นงวด)
- รองรับ Cron Expression สำหรับการกำหนดเวลาซับซ้อน
- จัดการ Time Zone
- **Priority levels (low, normal, high, urgent)**
- **Notification status tracking (draft, scheduled, queued, processing, sent, failed, cancelled)**

**FR-06: Advanced Recipient Management**
- เลือกผู้รับจาก LDAP (บุคคล, กลุ่ม, แผนก)
- สร้างกลุ่มการแจ้งเตือนแบบกำหนดเอง
- รองรับการกรองผู้รับตามเงื่อนไข
- **Recipient validation และ verification**

#### 3.1.3 Message Delivery

**FR-07: Microsoft Teams Integration**
- ส่งข้อความไปยัง Teams Channel
- ส่งข้อความส่วนตัวใน Teams
- รองรับ Adaptive Cards
- **Error handling และ retry mechanism**

**FR-08: Email Notification**
- ส่งอีเมลผ่าน SMTP
- รองรับ HTML และ Plain Text
- จัดการ Attachment
- **Email template customization**

**FR-09: Enhanced Message Queue Processing**
- ใช้ RabbitMQ ในการจัดการคิวข้อความ
- รองรับ Retry Mechanism
- Priority Queue สำหรับข้อความเร่งด่วน
- **Failed job handling และ monitoring**

#### 3.1.4 API Gateway Management

**FR-10: Advanced API Key Management**
- สร้างและจัดการ API Keys สำหรับระบบภายนอก
- **Permission-based API access control**
- **Rate limiting per API key**
- Expire Date และ Auto-renewal สำหรับ API Keys
- Revoke API Keys เมื่อจำเป็น
- **API usage tracking และ analytics**

**FR-11: Comprehensive External API Endpoints**
- API สำหรับส่งการแจ้งเตือนจากระบบภายนอก
- API สำหรับตรวจสอบสถานะการส่ง
- API สำหรับดึงรายการผู้ใช้จาก LDAP
- API สำหรับสร้างและจัดการกลุ่มการแจ้งเตือน
- **API documentation endpoint**
- **Health check endpoints**

**FR-12: Advanced API Rate Limiting**
- จำกัดจำนวนการเรียกใช้ API ต่อ API Key
- แยกแยะ Rate Limit ตาม API Key Level
- Throttling และ Queue สำหรับ Request ที่เกินขีดจำกัด
- **Per-endpoint rate limiting**
- **Rate limit headers ใน response**

#### 3.1.5 Enhanced System Features

**FR-13: Comprehensive Delivery Status Tracking**
- ติดตามสถานะการส่งข้อความ (Pending, Sent, Delivered, Failed)
- แสดงเหตุผลของการส่งที่ล้มเหลว
- Notification History
- API สำหรับ Query สถานะจากระบบภายนอก
- **Real-time status updates**

**FR-14: Advanced System Logging**
- บันทึก User Activities
- บันทึกการส่งข้อความทั้งหมด
- บันทึก System Errors และ Exceptions
- บันทึกการเข้าสู่ระบบ
- บันทึก API Usage และ API Key Activities
- **Activity log ด้วย Spatie Laravel Activitylog**

**FR-15: Enhanced Reporting and Analytics**
- รายงานสถิติการส่งข้อความ
- รายงานการใช้งานของผู้ใช้
- Dashboard แสดงข้อมูลแบบ Real-time
- Export รายงานเป็น PDF/Excel
- รายงานการใช้งาน API แยกตาม API Key
- API Usage Analytics และ Performance Metrics
- **Filter และ search capabilities**

---

## 4. Data Requirements

### 4.1 Enhanced Database Schema

#### 4.1.1 Core Tables (Updated)

**Users Table (Enhanced)**
```sql
- id: bigint (primary key)
- ldap_guid: string (nullable, unique)
- username: string (unique)
- email: string (unique)
- first_name: string
- last_name: string
- display_name: string
- department: string (nullable)
- title: string (nullable)
- phone: string (nullable)
- is_active: boolean (default: true)
- password: string (nullable, hashed)
- last_login_at: timestamp (nullable)
- ldap_synced_at: timestamp (nullable)
- auth_source: string (nullable) // 'ldap', 'fallback'
- deleted_at: timestamp (nullable) // Soft Delete
- created_at: timestamp
- updated_at: timestamp
```

**Permission System Tables (New)**
```sql
- permissions: Enhanced with display_name, description, category
- roles: Enhanced with description, level, permissions_count
- model_has_permissions: Junction table
- model_has_roles: Junction table  
- role_has_permissions: Junction table
```

**Notification Templates (Enhanced)**
```sql
- id: bigint (primary key)
- name: string
- description: text (nullable)
- subject: string
- html: text (nullable)
- text: text (nullable)
- variables: json (nullable) // Default variable values
- is_active: boolean (default: true)
- created_by: bigint (foreign key to users)
- created_at: timestamp
- updated_at: timestamp
```

**Notifications (Enhanced)**
```sql
- id: bigint (primary key)
- uuid: string (unique)
- template_id: bigint (nullable, foreign key)
- title: string
- content: text
- channels: json // ['teams', 'email']
- priority: enum ('low', 'normal', 'high', 'urgent')
- status: enum ('draft', 'scheduled', 'queued', 'processing', 'sent', 'failed', 'cancelled')
- recipients: json
- scheduled_at: timestamp (nullable)
- sent_at: timestamp (nullable)
- data: json (nullable) // Template variables
- created_by: bigint (foreign key to users)
- created_at: timestamp
- updated_at: timestamp
```

#### 4.1.2 API Management Tables (New)

**API Keys**
```sql
- id: bigint (primary key)
- name: string
- key: string (unique, encrypted)
- permissions: json (nullable)
- rate_limit_per_minute: integer (default: 60)
- allowed_ips: json (nullable)
- expires_at: timestamp (nullable)
- last_used_at: timestamp (nullable)
- is_active: boolean (default: true)
- created_by: bigint (foreign key to users)
- created_at: timestamp
- updated_at: timestamp
```

**API Usage Logs**
```sql
- id: bigint (primary key)
- api_key_id: bigint (foreign key)
- endpoint: string
- method: string
- ip_address: string
- user_agent: text (nullable)
- request_data: json (nullable, sanitized)
- response_data: json (nullable, sanitized)
- response_code: integer
- response_time: float
- created_at: timestamp
```

#### 4.1.3 System Tables (New)

**Cache Tables**
```sql
- cache: Laravel cache table
- cache_locks: Laravel cache locks
```

**Failed Jobs**
```sql
- failed_jobs: Laravel failed jobs table
```

### 4.2 Data Retention Policy (Updated)

- **Notification Logs**: เก็บ 1 ปี
- **Activity Logs**: เก็บ 6 เดือน  
- **System Logs**: เก็บ 3 เดือน
- **API Usage Logs**: เก็บ 3 เดือน
- **Failed Jobs**: เก็บ 1 เดือน
- **Cache**: TTL ตาม configuration

---

## 5. User Interface Requirements (Updated)

### 5.1 Enhanced Web Interface

- **Responsive Design** รองรับ Desktop และ Mobile
- **Modern UI Framework** (Bootstrap 5 + Custom CSS)
- **Dashboard** แสดงสถิติและสถานะแบบ Real-time
- **Form Builder** สำหรับสร้าง Notification Template พร้อม Preview
- **Role-based UI** แสดงเฉพาะฟีเจอร์ที่มีสิทธิ์

### 5.2 Key Screens (Updated)

1. **Login Page**: Hybrid LDAP + Fallback Authentication
2. **Dashboard**: สรุปสถิติ, การแจ้งเตือนล่าสุด, และ system health
3. **User Management**: 
   - จัดการผู้ใช้ LDAP และ Manual
   - Password reset functionality
   - Role assignment interface
4. **Permission Management**: จัดการ roles และ permissions
5. **Notification Management**: 
   - สร้าง/แก้ไข notifications
   - Template management พร้อม variable system
   - Status tracking interface
6. **API Key Management**: จัดการ API Keys พร้อม analytics
7. **Reports**: รายงานและสถิติแบบละเอียด
8. **System Logs**: ตรวจสอบ activity logs และ system logs
9. **Settings**: การตั้งค่าระบบและ preferences

---

## 6. External Interface Requirements (Updated)

### 6.1 LDAP Integration (Enhanced)
- **Protocol**: LDAP v3
- **Authentication**: Bind Authentication
- **Fallback Mechanism**: Automatic database authentication
- **Data Sync**: ทุก 6 ชั่วโมง หรือ on-demand
- **Attributes**: cn, mail, department, title
- **Connection Pooling**: สำหรับ performance

### 6.2 Microsoft Teams API
- **Protocol**: Microsoft Graph API
- **Authentication**: OAuth 2.0
- **Permissions**: ChannelMessage.Send, Chat.ReadWrite
- **Rate Limits**: 300 requests per minute
- **Error Handling**: Retry mechanism พร้อม exponential backoff

### 6.3 Email Integration (Enhanced)
- **Protocol**: SMTP/IMAP
- **Security**: TLS/SSL (required)
- **Authentication**: Username/Password หรือ OAuth
- **Template Support**: HTML และ Plain Text
- **Attachment Support**: File uploads

### 6.4 RabbitMQ Configuration (Enhanced)
- **Exchange Type**: Topic Exchange
- **Queue Durability**: Persistent
- **Message TTL**: 24 hours
- **Dead Letter Queue**: Enabled
- **Priority Queues**: สำหรับข้อความเร่งด่วน
- **Clustering**: สำหรับ high availability

---

## 7. Non-Functional Requirements (Updated)

### 7.1 Performance Requirements

**NFR-01: Response Time**
- การตอบสนองของ Web Interface ไม่เกิน 3 วินาที
- การประมวลผลข้อความในคิวไม่เกิน 30 วินาที
- การค้นหาข้อมูล Log ไม่เกิน 5 วินาที
- **API response time ไม่เกิน 1 วินาที**

**NFR-02: Throughput**
- รองรับการส่งข้อความ 1,000 ข้อความต่อนาที
- รองรับผู้ใช้งานพร้อมกัน 100 คน (Web Interface)
- รองรับ API Calls 5,000 requests ต่อนาที
- ประมวลผลคิวได้ 10,000 jobs ต่อชั่วโมง

### 7.2 Security Requirements (Enhanced)

**NFR-03: Authentication and Authorization**
- **Hybrid LDAP + Database Authentication**
- **Role-Based Access Control (RBAC)**
- API Key Authentication สำหรับ External Systems
- JWT Token สำหรับ Session Management (Web Interface)
- Session Timeout 8 ชั่วโมง
- **Permission-based API access control**
- **Rate limiting per API key**

**NFR-04: Data Security (Enhanced)**
- เข้ารหัสข้อมูลสำคัญใน Database
- ใช้ HTTPS สำหรับการสื่อสาร (required)
- Audit Trail สำหรับการเปลี่ยนแปลงข้อมูล
- เข้ารหัส API Keys ใน Database
- **Password hashing ด้วย bcrypt**
- **Sensitive data sanitization ใน logs**

### 7.3 Reliability Requirements

**NFR-05: Availability**
- ระบบต้องพร้อมใช้งาน 99.5% ของเวลา
- Downtime สำหรับ Maintenance ไม่เกิน 4 ชั่วโมงต่อเดือน
- **Graceful degradation เมื่อ LDAP ไม่พร้อมใช้งาน**

**NFR-06: Fault Tolerance (Enhanced)**
- Auto-retry สำหรับการส่งข้อความที่ล้มเหลว
- Graceful Degradation เมื่อบริการภายนอกไม่พร้อมใช้งาน
- Database Connection Pooling
- **Failed job monitoring และ alerting**

### 7.4 Scalability Requirements

**NFR-07: Horizontal Scaling**
- รองรับการเพิ่ม Worker Process สำหรับ Queue
- Database Connection Scaling
- Load Balancing Ready
- **Stateless application design**

---

## 8. Implementation Status & Timeline (Updated)

### 8.1 Completed Features ✅

**Phase 1 (Completed)**
- ✅ Laravel Framework Setup
- ✅ LDAP Integration พร้อม Fallback Authentication  
- ✅ Basic Authentication System
- ✅ User Model พร้อม Soft Delete

**Phase 2 (Completed)**
- ✅ Enhanced Database Schema
- ✅ Permission System (Spatie Package)
- ✅ User Management System
- ✅ Password Reset Functionality

**Phase 3 (In Progress)**
- ✅ Notification Templates System
- ✅ API Gateway พร้อม Rate Limiting
- ✅ API Key Management
- 🔄 Microsoft Teams Integration (In Progress)
- 🔄 Email Integration (In Progress)

### 8.2 Remaining Timeline

**Phase 4 (3 สัปดาห์)**
- RabbitMQ Integration
- Notification Queue Processing
- Template Variable Processing
- Delivery Status Tracking

**Phase 5 (2 สัปดาห์)**
- Advanced Reporting System
- Dashboard Analytics
- Performance Optimization
- Final Testing และ Bug Fixes

**Phase 6 (1 สัปดาห์)**
- Documentation Update
- Deployment Preparation
- Security Audit

---

## 9. Quality Assurance (Updated)

### 9.1 Testing Requirements

- **Unit Testing**: Coverage 80%+ (ใช้ PHPUnit)
- **Feature Testing**: Laravel Feature Tests
- **Integration Testing**: API และ Database
- **Security Testing**: Penetration Testing
- **Performance Testing**: Load testing พร้อม 1,000 concurrent users

### 9.2 Acceptance Criteria (Updated)

- ระบบส่งข้อความได้สำเร็จ 99% ของครั้ง
- ผู้ใช้สามารถเข้าสู่ระบบผ่าน LDAP หรือ Fallback ได้
- การแจ้งเตือนส่งถึงผู้รับภายใน 5 นาที
- ระบบแสดงสถานะการส่งแบบ Real-time
- **Permission system ทำงานได้ถูกต้อง 100%**
- **API rate limiting ทำงานตามที่กำหนด**

---

## 10. Risk Assessment (Updated)

### 10.1 Technical Risks

- **LDAP Connection Issues**: ✅ มี Fallback Authentication แล้ว
- **External API Rate Limits**: ✅ มี Queue และ Retry Logic
- **Database Performance**: ต้อง Indexing และ Query Optimization
- **Permission Complexity**: ต้องมี thorough testing

### 10.2 Operational Risks

- **Server Downtime**: ต้อง High Availability Setup
- **Data Loss**: ต้อง Regular Backup และ Disaster Recovery  
- **Security Breach**: ต้อง Regular Security Audit
- **User Permission Misconfiguration**: ต้องมี audit trail

---

## 11. Appendices (Updated)

### 11.1 API Endpoints (Current Implementation)

**Authentication APIs**
- `POST /api/auth/login` - LDAP Authentication (Web Interface)
- `POST /api/auth/validate-key` - Validate API Key

**External APIs (v1)**
- `POST /api/v1/notifications/send` - Send notification
- `POST /api/v1/notifications/bulk` - Send bulk notifications  
- `GET /api/v1/notifications/{id}/status` - Check status
- `GET /api/v1/health` - Health check
- `GET /api/v1/docs` - API documentation

**Web Interface APIs**
- `GET /api/notifications` - List notifications
- `POST /api/notifications` - Create notification
- `GET /api/reports/*` - Various reports
- `GET /api/admin/api-keys` - API key management

### 11.2 Environment Variables (Updated)

**Database**
- `DB_CONNECTION=pgsql`
- `DB_HOST`, `DB_PORT`, `DB_DATABASE`, `DB_USERNAME`, `DB_PASSWORD`

**LDAP Configuration**
- `LDAP_HOST`, `LDAP_PORT`, `LDAP_BASE_DN`
- `LDAP_USERNAME`, `LDAP_PASSWORD`

**External Services**
- `RABBITMQ_HOST`, `RABBITMQ_PORT`, `RABBITMQ_USERNAME`, `RABBITMQ_PASSWORD`
- `TEAMS_CLIENT_ID`, `TEAMS_CLIENT_SECRET`
- `MAIL_HOST`, `MAIL_PORT`, `MAIL_USERNAME`, `MAIL_PASSWORD`

**Security**
- `JWT_SECRET`
- `API_RATE_LIMIT=60`
- `API_KEY_EXPIRE_DAYS=365`

---

## 12. Change Log

### Version 2.0 (June 23, 2025)
- อัปเดต SRS ให้สอดคล้องกับการพัฒนาที่เกิดขึ้นจริง
- เพิ่ม Hybrid Authentication (LDAP + Fallback)
- เพิ่ม Permission System รายละเอียด
- อัปเดต Database Schema ให้สอดคล้องกับ Migration files
- เพิ่ม API Management features
- อัปเดต UI Requirements ตาม current implementation
- เพิ่ม Implementation Status tracking

### Version 1.0 (May 29, 2025)
- SRS เวอร์ชันแรก (Original Specification)

---

*สิ้นสุดเอกสาร SRS Version 2.0*